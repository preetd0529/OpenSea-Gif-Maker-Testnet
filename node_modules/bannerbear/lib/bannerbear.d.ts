interface CreateImageParams {
    modifications: any[];
    webhook_url?: string | null;
    transparent?: boolean;
    render_pdf?: boolean;
    metadata?: string | null;
}
interface CreateVideoParams {
    input_media_url: string;
    modifications: any[];
    blur?: number;
    trim_to_length_in_seconds?: number;
    webhook_url?: string;
    metadata?: string | null;
    frames?: any[];
    frame_duration?: any[];
    create_gif_preview?: boolean;
}
interface UpdateVideoParams {
    transcription?: string[];
    approved?: boolean;
}
interface UpdateTemplateParams {
    name?: string;
    tags?: string[];
    metadata?: any[];
}
interface CreateCollectionParams {
    modifications: any[];
    webhook_url?: string | null;
    metadata?: string;
    transparent?: boolean;
}
interface CreateScreenshotParams {
    width?: number;
    height?: number;
    mobile?: boolean;
    webhook_url?: string;
}
interface CreateAnimatedGifParams {
    frames: any[];
    input_media_url?: string;
}
interface CreateMovieParams {
    width: number;
    height: number;
    inputs: any[];
    transition?: string;
    soundtrack_url?: string;
    webhook_url?: string;
    metadata?: string;
}
interface ListTemplateParams {
    tag?: string;
    name?: string;
    page?: number;
    limit?: number;
}
export interface Image {
    created_at: string;
    status: string;
    self: string;
    uid: string;
    image_url: string;
    image_url_png: string;
    image_url_jpg: string;
    template: string;
    modifications: any[];
    webhook_url: string | null;
    webhook_response_code: string | null;
    transparent: boolean;
    metadata: any[] | null;
    template_name: string;
    width: number;
    height: number;
    render_pdf: boolean;
    pdf_url: string | null;
}
export interface Video {
    input_media_url: string;
    created_at: string;
    length_in_seconds: number | null;
    approval_required: boolean;
    approved: boolean;
    status: string;
    self: string;
    uid: string;
    render_type: string;
    percent_rendered: number | null;
    video_url: string | null;
}
export interface Template {
    created_at: string;
    updated_at: string;
    name: string;
    self: string;
    uid: string;
    preview_url: string;
    width: number;
    height: number;
    available_modifications: any[];
    metadata: any[] | null;
    tags: any[] | null;
}
export interface VideoTemplate extends Template {
    approval_required: boolean;
    render_type: string;
}
export interface TemplateSet {
    name: string;
    created_at: string;
    self: string;
    uid: string;
    available_modifications: any[];
    templates: any[];
}
export interface Screenshot {
    url: string;
    width: number;
    height: number | null;
    created_at: string;
    mobile: boolean;
    self: string;
    uid: string;
    screenshot_image_url: string;
    screenshot_png_url: string | null;
    webhook_url: string | null;
    webhook_response_code: string | null;
    status: string;
}
export interface Collection {
    created_at: string;
    uid: string;
    self: string;
    status: string;
    template_set: string;
    modifications: any[] | null;
    webhook_url: string | null;
    webhook_response_code: string | null;
    transparent: boolean;
    metadata: any[] | null;
    image_urls: any[] | null;
    images: Image[] | null;
}
export interface AnimatedGif {
    created_at: string;
    uid: string;
    self: string;
    template: string;
    status: string;
    input_media_url: string | null;
    frames: any[] | null;
    fps: number;
    frame_duration: any[] | null;
    loop: boolean;
    webhook_url: string | null;
    webhook_response_code: string | null;
    metadata: any[] | null;
}
export interface Movie {
    created_at: string;
    status: string;
    self: string;
    uid: string;
    width: number;
    height: number;
    percent_rendered: number;
    total_length_in_seconds: number | null;
    transition: string;
    soundtrack_url: string | null;
    inputs: any[] | null;
    movie_url: string | null;
    webhook_url: string | null;
    webhook_response_code: string | null;
    metadata: any[] | null;
}
export interface Font {
    Serif: Array<string>;
    "Sans Serif": Array<string>;
    Novelty: Array<string>;
    International: Array<string>;
    Custom: Array<string>;
}
export interface Account {
    created_at: string;
    uid: string;
    paid_plan_name: string;
    image_api_quota: number;
    image_api_usage_this_month: number;
    video_api_quota: number;
    video_api_usage_this_month: number;
    current_project: any;
}
export declare class Bannerbear {
    private api;
    private syncApi;
    private token;
    constructor(apiToken?: string);
    account(): Promise<Account>;
    fonts(): Promise<Font>;
    effects(): Promise<Array<string>>;
    get_image(uid: string): Promise<Image>;
    list_images(page?: number, limit?: number): Promise<Image[]>;
    create_image(uid: string, params: CreateImageParams, synchronous?: boolean): Promise<Image>;
    get_video(uid: string): Promise<Video>;
    list_videos(page?: number): Promise<Video[]>;
    create_video(uid: string, params: CreateVideoParams): Promise<Video>;
    update_video(uid: string, params: UpdateVideoParams): Promise<Video>;
    get_collection(uid: string): Promise<Collection>;
    list_collections(page?: number): Promise<Collection[]>;
    create_collection(uid: string, params: CreateCollectionParams, synchronous?: boolean): Promise<Collection>;
    get_screenshot(uid: string): Promise<Screenshot>;
    list_screenshots(page?: number): Promise<Screenshot[]>;
    create_screenshot(url: string, params?: CreateScreenshotParams, synchronous?: boolean): Promise<Screenshot>;
    get_animated_gif(uid: string): Promise<AnimatedGif>;
    list_animated_gifs(page?: number): Promise<AnimatedGif[]>;
    create_animated_gif(uid: string, params: CreateAnimatedGifParams): Promise<AnimatedGif>;
    get_movie(uid: string): Promise<Movie>;
    list_movies(page?: number): Promise<Movie[]>;
    create_movie(params: CreateMovieParams): Promise<Movie>;
    get_template(uid: string): Promise<Template>;
    update_template(uid: string, params: UpdateTemplateParams): Promise<Template>;
    list_templates(params?: ListTemplateParams): Promise<Template[]>;
    get_template_set(uid: string): Promise<TemplateSet>;
    list_template_sets(page?: number): Promise<TemplateSet[]>;
    get_video_template(uid: string): Promise<VideoTemplate>;
    list_video_templates(page?: number): Promise<VideoTemplate[]>;
    generate_signed_url(base_id: string, modifications: any, synchronous?: boolean): Promise<string>;
}
export default Bannerbear;
