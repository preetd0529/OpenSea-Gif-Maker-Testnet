"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bannerbear = void 0;
const node_fetch_1 = require("node-fetch");
const crypto_1 = __importDefault(require("crypto"));
const base64url_1 = __importDefault(require("base64url"));
const api_1 = __importDefault(require("./api"));
const API_ENDPOINT = "https://api.bannerbear.com/v2";
const API_ENDPOINT_SYNCHRONOUS = "https://sync.api.bannerbear.com/v2";
class Bannerbear {
    api;
    syncApi;
    token;
    constructor(apiToken) {
        this.token = apiToken || String(process.env['BANNERBEAR_API_KEY']);
        this.api = new api_1.default(new node_fetch_1.Headers({
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
        }), API_ENDPOINT);
        this.syncApi = new api_1.default(new node_fetch_1.Headers({
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
        }), API_ENDPOINT_SYNCHRONOUS);
    }
    async account() {
        return this.api.get('/account');
    }
    async fonts() {
        return this.api.get('/fonts');
    }
    async effects() {
        return this.api.get('/effects');
    }
    // =================================
    //            IMAGES
    // =================================
    async get_image(uid) {
        return this.api.get(`/images/${uid}`);
    }
    async list_images(page, limit) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        if (limit)
            queryString.push(`limit=${limit}`);
        return this.api.get(`/images${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_image(uid, params, synchronous = false) {
        if (synchronous) {
            return this.syncApi.post('/images', { ...params, template: uid });
        }
        return this.api.post('/images', { ...params, template: uid });
    }
    // =================================
    //            VIDEOS
    // =================================
    async get_video(uid) {
        return this.api.get(`/videos/${uid}`);
    }
    async list_videos(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/videos${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_video(uid, params) {
        return this.api.post('/videos', { ...params, video_template: uid });
    }
    async update_video(uid, params) {
        return this.api.patch('/videos', { ...params, uid: uid });
    }
    // =================================
    //            COLLECTIONS
    // =================================
    async get_collection(uid) {
        return this.api.get(`/collections/${uid}`);
    }
    async list_collections(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/collections${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_collection(uid, params, synchronous = false) {
        if (synchronous) {
            return this.syncApi.post('/collections', { ...params, template_set: uid });
        }
        return this.api.post('/collections', { ...params, template_set: uid });
    }
    // =================================
    //            SCREENSHOTS
    // =================================
    async get_screenshot(uid) {
        return this.api.get(`/screenshots/${uid}`);
    }
    async list_screenshots(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/screenshots${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_screenshot(url, params, synchronous = false) {
        if (synchronous) {
            return this.syncApi.post('/screenshots', { ...params, url });
        }
        return this.api.post(`/screenshots`, { ...params, url });
    }
    // =================================
    //            ANIMATED GIFS
    // =================================
    async get_animated_gif(uid) {
        return this.api.get(`/animated_gifs/${uid}`);
    }
    async list_animated_gifs(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/animated_gifs${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_animated_gif(uid, params) {
        return this.api.post(`/animated_gifs`, { ...params, template: uid });
    }
    // =================================
    //            MOVIES
    // =================================
    async get_movie(uid) {
        return this.api.get(`/movies/${uid}`);
    }
    async list_movies(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/movies${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    async create_movie(params) {
        return this.api.post(`/movies`, { ...params });
    }
    // =================================
    //            TEMPLATES
    // =================================
    async get_template(uid) {
        return this.api.get(`/templates/${uid}`);
    }
    async update_template(uid, params) {
        return this.api.patch(`/templates/${uid}`, { ...params });
    }
    async list_templates(params) {
        const { page, limit, tag, name } = params || {};
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        if (tag)
            queryString.push(`tag=${tag}`);
        if (limit)
            queryString.push(`limit=${limit}`);
        if (name)
            queryString.push(`name=${name}`);
        return this.api.get(`/templates${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    // =================================
    //            TEMPLATE SETS
    // =================================
    async get_template_set(uid) {
        return this.api.get(`/template_sets/${uid}`);
    }
    async list_template_sets(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/template_sets${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    // =================================
    //            VIDEO TEMPLATES
    // =================================
    async get_video_template(uid) {
        return this.api.get(`/video_templates/${uid}`);
    }
    async list_video_templates(page) {
        let queryString = [];
        if (page)
            queryString.push(`page=${page}`);
        return this.api.get(`/video_templates${queryString.length > 0 ? `?` + queryString.join('&') : ''}`);
    }
    // =================================
    //            SIGNED URLS
    // =================================
    async generate_signed_url(base_id, modifications, synchronous = false) {
        const base = `https://${synchronous ? 'cdn' : 'ondemand'}.bannerbear.com/signedurl/${base_id}/image.jpg`;
        const query = `?modifications=${(0, base64url_1.default)(JSON.stringify(modifications))}`;
        const signature = crypto_1.default.createHmac('sha256', this.token).update(`${base}${query}`).digest('hex');
        return `${base}${query}&s=${signature}`;
    }
}
exports.Bannerbear = Bannerbear;
exports.default = Bannerbear;
